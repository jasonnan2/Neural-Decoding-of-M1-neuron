function [noise,T]=data_noise(train)
N=91;K=8;;bin=20;
% Processing training data
Num_trials=[40:10:100];
for r=1:5
    for i=1:7
        T{r,i}=zeros(1,Num_trials(i));
        for j=1:Num_trials(i)
            % extract individual trials
            train_data=train(r,i).data(j).spikes;
            train_arm=train(r,i).data(j).handPos;

            % Truncating the dataset
            s=length(train_data); truncated_length=s-mod(s,bin);
            train_data=train_data(:,1:truncated_length);
            train_arm=train_arm(:,1:truncated_length);
            T{r,i}(j)=(truncated_length/bin);


            for t=1:T{r,i}(j)
                % setting binning ranges
                low=(t-1)*20+1;
                up=20*t;
                range=train_data(:,low:up);
                noise(r,i).data(j,1).spikes(:,t)=sum(range,2);
                noise(r,i).data(j,1).arm(1,t)=train_arm(1,up);
                noise(r,i).data(j,1).arm(2,t)=train_arm(2,up);
                if t==1
                    noise(r,i).data(j,1).arm(3,t)=(train_arm(1,up)-train_arm(1,low))/20;
                    noise(r,i).data(j,1).arm(4,t)=(train_arm(2,up)-train_arm(2,low))/20;
                else
                    noise(r,i).data(j,1).arm(3,t)=(noise(r,i).data(j,1).arm(1,t)-noise(r,i).data(j,1).arm(1,t-1))/20;
                    noise(r,i).data(j,1).arm(4,t)=(noise(r,i).data(j,1).arm(2,t)-noise(r,i).data(j,1).arm(2,t-1))/20;
                end
            end

            for no=2:20
                noisy=noise(r,i).data(j,1).spikes+round(randn([97,t]));
                noisy(noisy<0)=0;
                noise(r,i).data(j,no).spikes=noisy;
                noise(r,i).data(j,no).arm=noise(r,i).data(j,1).arm;
            end
        end
    end
end
end


